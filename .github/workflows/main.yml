name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: temurin

      - name: Validate directory structure
        run: |
          echo "Validating directory structure..."
          ls -la
          ls -la Backend-Java-Spring
          ls -la Frontend-Angular
          ls -la Terraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          cd Terraform
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Get EKS Cluster Name
        id: eks
        run: |
          cd Terraform
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV

      - name: Build Manufacturer Microservice
        run: |
          cd Backend-Java-Spring/Manfacturer
          ./mvnw clean package

      - name: Build ShopClues Microservice
        run: |
          cd Backend-Java-Spring/ShopClues
          ./mvnw clean package

      - name: Build ShopClues Frontend Application
        run: |
          cd Frontend-Angular/ShopClues
          npm install
          npm run build

      - name: Build Docker Images and Push to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ap-south-1
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Manufacturer Microservice
          cd Backend-Java-Spring/Manfacturer
          docker build -t manufacturer-backend .
          docker tag manufacturer-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mytest:manufacturer-backend-latest

          # ShopClues Microservice
          cd ../ShopClues
          docker build -t shopclues-backend .
          docker tag shopclues-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mytest:shopclues-backend-latest

          # ShopClues Frontend
          cd ../../Frontend-Angular/ShopClues
          docker build -t shopclues-frontend .
          docker tag shopclues-frontend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mytest:shopclues-frontend-latest

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          # Push Docker Images
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mytest:manufacturer-backend-latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mytest:shopclues-backend-latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mytest:shopclues-frontend-latest

      - name: Deploy to EKS Cluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ap-south-1
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REG`ION

            # Create Kubernetes secret
          kubectl create secret generic aws-secrets \
            --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

          # Apply Kubernetes deployment and service files for Manufacturer Microservice
          cd Backend-Java-Spring/Manfacturer
          kubectl apply -f manufacturer-deployment.yaml
          kubectl apply -f service.yaml

          # Apply Kubernetes deployment and service files for ShopClues Microservice
          cd ../ShopClues
          kubectl apply -f shopclues-deployment.yaml
          kubectl apply -f service.yaml

          # Apply Kubernetes deployment and service files for ShopClues Frontend
          cd ../../Frontend-Angular/ShopClues
          kubectl apply -f shopclues-frontend-deployment.yaml
          kubectl apply -f service.yaml
